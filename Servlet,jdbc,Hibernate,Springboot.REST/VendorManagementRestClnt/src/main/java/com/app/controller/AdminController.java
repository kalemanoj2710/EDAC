package com.app.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.app.pojos.PaymentMode;
import com.app.pojos.Vendor;
import com.app.service.IVendorService;

@Controller
@RequestMapping("/admin")
public class AdminController {
	//dependency : Vendor service i/f
	@Autowired
	private IVendorService vendorService;
	
	public AdminController() {
		System.out.println("in ctor of "+getClass().getName());
	}
	//add a req handling method to show main admin page , displaying CRUD options
	@GetMapping("/list")
	public String showVendorList(Model map)
	{
		System.out.println("in show vendor list");
		//invoke service latyer method to get all vendors list n save it as model attribute (since using forward
		//to navigate the clnt to the view layer
		map.addAttribute("vendor_list",vendorService.getAllVendors());
		return "/admin/list";//actual view Name by V.R : /WEB-INF/views/admin/list.jsp		
	}
	//add req handling method to delete vendor details
	@GetMapping("/delete")
	public String deleteVendorDetails(@RequestParam int vid,RedirectAttributes flashMap)
	//flashMap => map of flash scoped attributes(i.e visible till the NEXT req coming from the SAME clnt)
	{
		System.out.println("in del vendor dtls "+vid);
		//invoke dao 's method for vendor deletion
		flashMap.addFlashAttribute("message", vendorService.deleteVendorDetails(vid));
		return "redirect:/admin/list";
	}
	//add req handling method to show reg form to the clnt
	@GetMapping("/register")
	//Step 1 (2 way data binding/ form data binding) : Add EMPTY POJO instance(using def constr) in model map
	public String showRegForm(Model modelMap,Vendor v)
	{
		System.out.println("in show reg form "+modelMap);//{vendor : Vendor empty obj : toString}
//		modelMap.addAttribute("vendor_details", new Vendor());//model(pojo) ----> view layer
		modelMap.addAttribute("payment_modes", PaymentMode.values());
		System.out.println(modelMap);//populated : {vendor_details : Vendor' tostring, payment_mode : enum[])
		return "/admin/register";//Actual view name generated by V.R : /WEB-INF/views/admin/register.jsp
	}
	//add req handling method for processing reg form
	//step 3 : form data(view) ----> POJO (model)
	@PostMapping("/register")
	public String processRegForm(@Valid Vendor v,BindingResult res,RedirectAttributes flashMap,Model modelMap)
	{
		System.out.println("in process reg form : vendor dtls "+v);
		System.out.println("payment dtls "+v.getDetails());
		System.out.println("binding result "+res);
		//chk for  P.L errors
		if(res.hasErrors())
		{
			System.out.println("in P.L validation failure");
			modelMap.addAttribute("payment_modes", PaymentMode.values());
			//forward the clnt to reg form : highlighted with errs
			return "/admin/register";//Actual view name generated by V.R : /WEB-INF/views/admin/register.jsp
		}
		//after inserting the details : redirect clnt to vendor list 
		flashMap.addFlashAttribute("message",vendorService.registerVendor(v));
		return "redirect:/admin/list";
	}
	
}
